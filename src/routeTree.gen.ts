/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteImport } from './routes/_public'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as PublicIndexRouteImport } from './routes/_public/index'
import { Route as AdminMenuRouteImport } from './routes/admin/menu'
import { Route as PublicReserverRouteImport } from './routes/_public/reserver'
import { Route as PublicMenuRouteImport } from './routes/_public/menu'

const PublicRoute = PublicRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/admin/',
  path: '/admin/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicIndexRoute = PublicIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)
const AdminMenuRoute = AdminMenuRouteImport.update({
  id: '/admin/menu',
  path: '/admin/menu',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicReserverRoute = PublicReserverRouteImport.update({
  id: '/reserver',
  path: '/reserver',
  getParentRoute: () => PublicRoute,
} as any)
const PublicMenuRoute = PublicMenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => PublicRoute,
} as any)

export interface FileRoutesByFullPath {
  '/menu': typeof PublicMenuRoute
  '/reserver': typeof PublicReserverRoute
  '/admin/menu': typeof AdminMenuRoute
  '/': typeof PublicIndexRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/menu': typeof PublicMenuRoute
  '/reserver': typeof PublicReserverRoute
  '/admin/menu': typeof AdminMenuRoute
  '/': typeof PublicIndexRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_public': typeof PublicRouteWithChildren
  '/_public/menu': typeof PublicMenuRoute
  '/_public/reserver': typeof PublicReserverRoute
  '/admin/menu': typeof AdminMenuRoute
  '/_public/': typeof PublicIndexRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/menu' | '/reserver' | '/admin/menu' | '/' | '/admin'
  fileRoutesByTo: FileRoutesByTo
  to: '/menu' | '/reserver' | '/admin/menu' | '/' | '/admin'
  id:
    | '__root__'
    | '/_public'
    | '/_public/menu'
    | '/_public/reserver'
    | '/admin/menu'
    | '/_public/'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PublicRoute: typeof PublicRouteWithChildren
  AdminMenuRoute: typeof AdminMenuRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexRouteImport
      parentRoute: typeof PublicRoute
    }
    '/admin/menu': {
      id: '/admin/menu'
      path: '/admin/menu'
      fullPath: '/admin/menu'
      preLoaderRoute: typeof AdminMenuRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/reserver': {
      id: '/_public/reserver'
      path: '/reserver'
      fullPath: '/reserver'
      preLoaderRoute: typeof PublicReserverRouteImport
      parentRoute: typeof PublicRoute
    }
    '/_public/menu': {
      id: '/_public/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof PublicMenuRouteImport
      parentRoute: typeof PublicRoute
    }
  }
}

interface PublicRouteChildren {
  PublicMenuRoute: typeof PublicMenuRoute
  PublicReserverRoute: typeof PublicReserverRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicMenuRoute: PublicMenuRoute,
  PublicReserverRoute: PublicReserverRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  PublicRoute: PublicRouteWithChildren,
  AdminMenuRoute: AdminMenuRoute,
  AdminIndexRoute: AdminIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
